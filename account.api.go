// Code generated by protoc-gen-go_api(github.com/dev-openapi/protoc-gen-go_api version=v1.0.2). DO NOT EDIT.
// source: douyin-webapp/account.proto

package douyin_webapp

import (
	context "context"
	fmt "fmt"
	io "io"
	json "encoding/json"
	bytes "bytes"
	http "net/http"
	strings "strings"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = http.NewRequest
var _ = io.Copy
var _ = bytes.Compare
var _ = json.Marshal
var _ = strings.Compare
var _ = fmt.Errorf


// Client API for Account service

type AccountService interface {
	// GetUserInfo  获取用户公开信息 https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-management/get-account-open-info
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...Option) (*GetUserInfoRes, error)
	// FansCheck  粉丝判断 https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-management/fans-judge
	FansCheck(ctx context.Context, in *FansCheckReq, opts ...Option) (*FansCheckRes, error)
}

type accountService struct {
	// opts
	opts *Options
}

func NewAccountService(opts ...Option) AccountService {
	opt := newOptions(opts...)
	if len(opt.addr) <= 0 {
		opt.addr = "https://open.douyin.com"
	}
	return &accountService {
		opts: opt,
	}
}


func (c *accountService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...Option) (*GetUserInfoRes, error) {
	var res GetUserInfoRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/oauth/userinfo", opt.addr)

	// body
	var body io.Reader
	bodyForms := make(map[string]string)
	if in.GetAccessToken() != "" {
		bodyForms["access_token"] = fmt.Sprintf("%v", in.GetAccessToken())
	}
	if in.GetOpenId() != "" {
		bodyForms["open_id"] = fmt.Sprintf("%v", in.GetOpenId())
	}
	var bs []string
	for k, v := range bodyForms {
		bs = append(bs, fmt.Sprintf("%s=%s", k, v))
	}
	body = strings.NewReader(strings.Join(bs, "&"))
	headers["Content-Type"] = "application/x-www-form-urlencoded"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(resp, &res)
	return &res, err 

}

func (c *accountService) FansCheck(ctx context.Context, in *FansCheckReq, opts ...Option) (*FansCheckRes, error) {
	var res FansCheckRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/fans/check", opt.addr)

	// body
	var body io.Reader
	bs, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	body = bytes.NewReader(bs)
	headers["Content-Type"] = "application/json"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(resp, &res)
	return &res, err 

}
