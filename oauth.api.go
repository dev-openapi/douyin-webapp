// Code generated by protoc-gen-go_api(github.com/dev-openapi/protoc-gen-go_api version=v1.0.2). DO NOT EDIT.
// source: douyin-webapp/oauth.proto

package douyin_webapp

import (
	context "context"
	fmt "fmt"
	io "io"
	json "encoding/json"
	bytes "bytes"
	http "net/http"
	strings "strings"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = http.NewRequest
var _ = io.Copy
var _ = bytes.Compare
var _ = json.Marshal
var _ = strings.Compare
var _ = fmt.Errorf


// Client API for Oauth service

type OauthService interface {
	// GetAccessToken  获取 access_token https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-permission/get-access-token
	GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...Option) (*GetAccessTokenRes, error)
	// RenewRefreshToken  刷新 refresh_token form格式 https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-permission/refresh-token
	RenewRefreshToken(ctx context.Context, in *RenewRefreshTokenReq, opts ...Option) (*RenewRefreshTokenRes, error)
	// GetClientToken  生成client_token https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-permission/client-token
	GetClientToken(ctx context.Context, in *GetClientTokenReq, opts ...Option) (*GetClientTokenRes, error)
	// RefreshAccessToken  刷新access_token https://developer.open-douyin.com/docs/resource/zh-CN/dop/develop/openapi/account-permission/refresh-access-token
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...Option) (*RefreshAccessTokenRes, error)
}

type oauthService struct {
	// opts
	opts *Options
}

func NewOauthService(opts ...Option) OauthService {
	opt := newOptions(opts...)
	if len(opt.addr) <= 0 {
		opt.addr = "https://open.douyin.com"
	}
	return &oauthService {
		opts: opt,
	}
}


func (c *oauthService) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...Option) (*GetAccessTokenRes, error) {
	var res GetAccessTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/oauth/access_token", opt.addr)

	// body
	var body io.Reader
	bs, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	body = bytes.NewReader(bs)
	headers["Content-Type"] = "application/json"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}

func (c *oauthService) RenewRefreshToken(ctx context.Context, in *RenewRefreshTokenReq, opts ...Option) (*RenewRefreshTokenRes, error) {
	var res RenewRefreshTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/oauth/renew_refresh_token", opt.addr)

	// body
	var body io.Reader
	bodyForms := make(map[string]string)
	if in.GetClientKey() != "" {
		bodyForms["client_key"] = fmt.Sprintf("%v", in.GetClientKey())
	}
	if in.GetRefreshToken() != "" {
		bodyForms["refresh_token"] = fmt.Sprintf("%v", in.GetRefreshToken())
	}
	var bs []string
	for k, v := range bodyForms {
		bs = append(bs, fmt.Sprintf("%s=%s", k, v))
	}
	body = strings.NewReader(strings.Join(bs, "&"))
	headers["Content-Type"] = "application/x-www-form-urlencoded"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}

func (c *oauthService) GetClientToken(ctx context.Context, in *GetClientTokenReq, opts ...Option) (*GetClientTokenRes, error) {
	var res GetClientTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/oauth/client_token", opt.addr)

	// body
	var body io.Reader
	bs, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	body = bytes.NewReader(bs)
	headers["Content-Type"] = "application/json"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}

func (c *oauthService) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...Option) (*RefreshAccessTokenRes, error) {
	var res RefreshAccessTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/oauth/refresh_token", opt.addr)

	// body
	var body io.Reader
	bodyForms := make(map[string]string)
	if in.GetClientKey() != "" {
		bodyForms["client_key"] = fmt.Sprintf("%v", in.GetClientKey())
	}
	if in.GetGrantType() != "" {
		bodyForms["grant_type"] = fmt.Sprintf("%v", in.GetGrantType())
	}
	if in.GetRefreshToken() != "" {
		bodyForms["refresh_token"] = fmt.Sprintf("%v", in.GetRefreshToken())
	}
	var bs []string
	for k, v := range bodyForms {
		bs = append(bs, fmt.Sprintf("%s=%s", k, v))
	}
	body = strings.NewReader(strings.Join(bs, "&"))
	headers["Content-Type"] = "application/x-www-form-urlencoded"

	req, err := http.NewRequest("POST", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}
